// src/pages/admin/WageLedger/WageLedgerView.js
import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { db } from '../../../firebase';
import { collection, query, where, getDocs, orderBy } from 'firebase/firestore';
import { useAuth } from '../../../contexts/AuthContext';

function WageLedgerView() {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { userDetails } = useAuth();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [payslipData, setPayslipData] = useState([]);
  const [employeeInfo, setEmployeeInfo] = useState(null);

  // URL„Éë„É©„É°„Éº„Çø„Åã„ÇâÊúüÈñì„Å®ÂæìÊ•≠Âì°ÊÉÖÂ†±„ÇíÂèñÂæó
  const startYear = parseInt(searchParams.get('startYear'));
  const startMonth = parseInt(searchParams.get('startMonth'));
  const endYear = parseInt(searchParams.get('endYear'));
  const endMonth = parseInt(searchParams.get('endMonth'));
  const employeeId = searchParams.get('employeeId');
  const employeeName = searchParams.get('employeeName');

  useEffect(() => {
    const fetchWageLedgerData = async () => {
      if (!userDetails?.companyId || !employeeId) return;

      try {
        setLoading(true);
        
        // ÊúüÈñì„ÅÆÈñãÂßãÊó•„Å®ÁµÇ‰∫ÜÊó•„ÇíË®àÁÆóÔºàuseEffectÂÜÖ„ÅßÂÆüË°åÔºâ
        const startDate = new Date(startYear, startMonth - 1, 1);
        const endDate = new Date(endYear, endMonth, 0);
        
        console.log('üîç Ë≥ÉÈáëÂè∞Â∏≥Ë©≥Á¥∞„Éá„Éº„ÇøÂèñÂæóÈñãÂßã');
        console.log('ÂæìÊ•≠Âì°ID:', employeeId);
        console.log('ÊúüÈñì:', startDate.toISOString().split('T')[0], '„Äú', endDate.toISOString().split('T')[0]);
        
        // ÂæìÊ•≠Âì°„ÅÆÁµ¶‰∏éÊòéÁ¥∞„Éá„Éº„Çø„ÇíÂèñÂæó
        const payslipsQuery = query(
          collection(db, 'payslips'),
          where('companyId', '==', userDetails.companyId),
          where('employeeId', '==', employeeId),
          where('payDate', '>=', startDate.toISOString().split('T')[0]),
          where('payDate', '<=', endDate.toISOString().split('T')[0]),
          orderBy('payDate', 'asc')
        );
        
        const payslipsSnapshot = await getDocs(payslipsQuery);
        const payslips = payslipsSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        
        console.log('üìÑ Ë©≤ÂΩì„Åô„ÇãÁµ¶‰∏éÊòéÁ¥∞:', payslips.length, '‰ª∂');
        setPayslipData(payslips);

        // ÂæìÊ•≠Âì°ÊÉÖÂ†±„ÇíÂèñÂæó
        const employeeQuery = query(
          collection(db, 'employees'),
          where('companyId', '==', userDetails.companyId),
          where('employeeId', '==', employeeId)
        );
        
        const employeeSnapshot = await getDocs(employeeQuery);
        if (!employeeSnapshot.empty) {
          setEmployeeInfo(employeeSnapshot.docs[0].data());
          console.log('üë§ ÂæìÊ•≠Âì°ÊÉÖÂ†±ÂèñÂæóÂÆå‰∫Ü');
        }

        setLoading(false);
      } catch (err) {
        console.error('‚ùå Ë≥ÉÈáëÂè∞Â∏≥„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', err);
        setError('„Éá„Éº„Çø„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
        setLoading(false);
      }
    };

    fetchWageLedgerData();
  }, [userDetails, employeeId, startYear, startMonth, endYear, endMonth]);

  // Áµ¶‰∏éÊòéÁ¥∞„Éá„Éº„Çø„ÇíË≥ÉÈáëÂè∞Â∏≥ÂΩ¢Âºè„Å´Â§âÊèõ
  const formatPayslipForWageLedger = (payslip) => {
    // Áµ¶‰∏éÊòéÁ¥∞„ÅÆË©≥Á¥∞„Éá„Éº„Çø„ÇíËß£Êûê
    const details = payslip.details || {};
    
    // Âü∫Êú¨Áµ¶„ÅÆË®àÁÆóÔºàÂêÑÁ®ÆÊâãÂΩì„ÇíÈô§„ÅèÂü∫Êú¨ÁöÑ„Å™ÊîØÁµ¶È°çÔºâ
    let basicWage = 0;
    let overtime = 0;
    let allowances = 0;
    let totalGross = 0;
    let totalDeductions = 0;
    let netPay = payslip.netPay || 0;

    // Ë©≥Á¥∞„Éá„Éº„Çø„Åã„ÇâÈ†ÖÁõÆ„ÇíÂàÜÈ°û
    Object.entries(details).forEach(([key, item]) => {
      const amount = parseFloat(item.amount || 0);
      
      if (item.category === 'income') {
        totalGross += amount;
        
        // È†ÖÁõÆÂêç„ÅßÂàÜÈ°û
        if (key.includes('Âü∫Êú¨Áµ¶') || key.includes('Âü∫Ê∫ñÂÜÖË≥ÉÈáë')) {
          basicWage += amount;
        } else if (key.includes('ÊÆãÊ•≠') || key.includes('ÊôÇÈñìÂ§ñ')) {
          overtime += amount;
        } else {
          allowances += amount;
        }
      } else if (item.category === 'deduction') {
        totalDeductions += amount;
      }
    });

    // Á∑èÊîØÁµ¶È°ç„Åå„Å™„ÅÑÂ†¥Âêà„ÅØË©≥Á¥∞„Åã„ÇâË®àÁÆó
    if (totalGross === 0) {
      totalGross = payslip.grossPay || basicWage + overtime + allowances;
    }

    // Âã§ÊÄ†ÊÉÖÂ†±„ÅÆÂèñÂæó
    const workingDays = details['Âá∫Âã§Êó•Êï∞']?.amount || 
                       details['Âã§ÂãôÊó•Êï∞']?.amount || 
                       22; // „Éá„Éï„Ç©„É´„ÉàÂÄ§

    const workingHours = details['Âä¥ÂÉçÊôÇÈñì']?.amount || 
                        details['Âã§ÂãôÊôÇÈñì']?.amount || 
                        workingDays * 8; // „Éá„Éï„Ç©„É´„ÉàÂÄ§

    const overtimeHours = details['ÊÆãÊ•≠ÊôÇÈñì']?.amount || 
                         details['ÊôÇÈñìÂ§ñÂä¥ÂÉçÊôÇÈñì']?.amount || 
                         0;

    return {
      payDate: payslip.payDate,
      basicWage: Math.floor(basicWage),
      overtime: Math.floor(overtime),
      allowances: Math.floor(allowances),
      totalGross: Math.floor(totalGross),
      totalDeductions: Math.floor(totalDeductions),
      netPay: Math.floor(netPay),
      workingDays: workingDays,
      workingHours: workingHours,
      overtimeHours: overtimeHours
    };
  };

  const formatPeriod = () => {
    return `${startYear}Âπ¥${startMonth}Êúà „Äú ${endYear}Âπ¥${endMonth}Êúà`;
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('ja-JP').format(amount);
  };

  const formatMonth = (payDate) => {
    const date = new Date(payDate);
    return `${date.getFullYear()}Âπ¥${date.getMonth() + 1}Êúà`;
  };

  // ÊúüÈñì‰∏≠„ÅÆÂÖ®„Å¶„ÅÆÊúà„ÇíÁîüÊàê„Åô„ÇãÈñ¢Êï∞
  const generateAllMonthsInPeriod = () => {
    const months = [];
    let currentDate = new Date(startYear, startMonth - 1, 1);
    const endDate = new Date(endYear, endMonth - 1, 1);
    
    while (currentDate <= endDate) {
      const year = currentDate.getFullYear();
      const month = currentDate.getMonth() + 1;
      const monthKey = `${year}-${month.toString().padStart(2, '0')}`;
      
      months.push({
        year,
        month,
        monthKey,
        displayText: `${year}Âπ¥${month}Êúà`
      });
      
      currentDate.setMonth(currentDate.getMonth() + 1);
    }
    
    return months;
  };

  // Áµ¶‰∏éÊòéÁ¥∞„Éá„Éº„Çø„ÇíÊúàÂà•„Å´„Éû„ÉÉ„ÉóÂåñ
  const getPayslipByMonth = () => {
    const payslipMap = {};
    
    payslipData.forEach(payslip => {
      const payDate = new Date(payslip.payDate);
      const monthKey = `${payDate.getFullYear()}-${(payDate.getMonth() + 1).toString().padStart(2, '0')}`;
      payslipMap[monthKey] = payslip;
    });
    
    return payslipMap;
  };

  // ÊúüÈñì‰∏≠„ÅÆÂÖ®Êúà„ÅÆË≥ÉÈáëÂè∞Â∏≥„Éá„Éº„Çø„ÇíÁîüÊàêÔºà„Éñ„É©„É≥„ÇØÊúàÂê´„ÇÄÔºâ
  const generateCompleteWageLedgerData = () => {
    const allMonths = generateAllMonthsInPeriod();
    const payslipMap = getPayslipByMonth();
    
    return allMonths.map(month => {
      const payslip = payslipMap[month.monthKey];
      
      if (payslip) {
        // „Éá„Éº„Çø„Åå„ÅÇ„ÇãÊúà„ÅØÈÄöÂ∏∏„ÅÆÂá¶ÁêÜ
        return {
          ...formatPayslipForWageLedger(payslip),
          displayText: month.displayText,
          hasData: true
        };
      } else {
        // „Éá„Éº„Çø„Åå„Å™„ÅÑÊúà„ÅØ„Éñ„É©„É≥„ÇØ„Éá„Éº„Çø
        return {
          payDate: `${month.year}-${month.month.toString().padStart(2, '0')}-01`,
          basicWage: 0,
          overtime: 0,
          allowances: 0,
          totalGross: 0,
          totalDeductions: 0,
          netPay: 0,
          workingDays: 0,
          workingHours: 0,
          overtimeHours: 0,
          displayText: month.displayText,
          hasData: false
        };
      }
    });
  };

  const getTotals = () => {
    const completeData = generateCompleteWageLedgerData();
    const totals = completeData.reduce((acc, data) => {
      if (data.hasData) {
        return {
          basicWage: acc.basicWage + data.basicWage,
          overtime: acc.overtime + data.overtime,
          allowances: acc.allowances + data.allowances,
          totalGross: acc.totalGross + data.totalGross,
          totalDeductions: acc.totalDeductions + data.totalDeductions,
          netPay: acc.netPay + data.netPay,
          workingDays: acc.workingDays + data.workingDays,
          workingHours: acc.workingHours + data.workingHours,
          overtimeHours: acc.overtimeHours + data.overtimeHours
        };
      }
      return acc;
    }, {
      basicWage: 0,
      overtime: 0,
      allowances: 0,
      totalGross: 0,
      totalDeductions: 0,
      netPay: 0,
      workingDays: 0,
      workingHours: 0,
      overtimeHours: 0
    });

    return totals;
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Ë≥ÉÈáëÂè∞Â∏≥„ÇíÁîüÊàê‰∏≠...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-100 text-red-700 p-4 rounded-md">
          {error}
        </div>
      </div>
    );
  }

  const totals = getTotals();

  return (
    <div className="container mx-auto px-4 py-8">
      {/* „Éñ„É¨„ÉÉ„Éâ„ÇØ„É©„É† */}
      <div className="mb-6">
        <nav className="text-sm breadcrumbs mb-4">
          <span className="text-gray-500 cursor-pointer" onClick={() => navigate('/admin/wage-ledger')}>
            Ë≥ÉÈáëÂè∞Â∏≥
          </span>
          <span className="mx-2 text-gray-400">‚Ä∫</span>
          <span className="text-gray-500 cursor-pointer" onClick={() => navigate('/admin/wage-ledger/period-select')}>
            ÊúüÈñìÈÅ∏Êäû
          </span>
          <span className="mx-2 text-gray-400">‚Ä∫</span>
          <span className="text-gray-500 cursor-pointer" onClick={() => navigate(`/admin/wage-ledger/employees?${searchParams.toString()}`)}>
            ÂæìÊ•≠Âì°ÈÅ∏Êäû
          </span>
          <span className="mx-2 text-gray-400">‚Ä∫</span>
          <span className="text-blue-600 font-medium">Ë≥ÉÈáëÂè∞Â∏≥</span>
        </nav>
        <h1 className="text-2xl font-bold text-gray-900">Ë≥ÉÈáëÂè∞Â∏≥</h1>
        <p className="text-gray-600 mt-2">
          {employeeName}„Åï„Çì„ÅÆË≥ÉÈáëÂè∞Â∏≥Ôºà{formatPeriod()}Ôºâ
        </p>
      </div>

      {/* ÂæìÊ•≠Âì°ÊÉÖÂ†±„Éò„ÉÉ„ÉÄ„Éº */}
      <div className="bg-white rounded-lg shadow-md mb-6">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-medium text-gray-900">ÂæìÊ•≠Âì°ÊÉÖÂ†±</h2>
        </div>
        <div className="px-6 py-4">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div>
              <label className="text-sm font-medium text-gray-500">ÂæìÊ•≠Âì°ID</label>
              <p className="text-gray-900">{employeeId}</p>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-500">Ê∞èÂêç</label>
              <p className="text-gray-900">{employeeName}</p>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-500">ÈÉ®ÈñÄ</label>
              <p className="text-gray-900">{employeeInfo?.departmentCode || '-'}</p>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-500">ÂØæË±°ÊúüÈñì</label>
              <p className="text-gray-900">{formatPeriod()}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Ë≥ÉÈáëÂè∞Â∏≥„ÉÜ„Éº„Éñ„É´ */}
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-medium text-gray-900">Ë≥ÉÈáëÂè∞Â∏≥ÔºàÊ≥ïÂÆöÊßòÂºèÊ∫ñÊã†Ôºâ</h2>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Âπ¥Êúà
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Âü∫Êú¨Áµ¶
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ÊÆãÊ•≠‰ª£
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Ë´∏ÊâãÂΩì
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Á∑èÊîØÁµ¶È°ç
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ÊéßÈô§Ë®à
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ÂÆüÊîØÁµ¶È°ç
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Âá∫Âã§Êó•Êï∞
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Âä¥ÂÉçÊôÇÈñì
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ÊÆãÊ•≠ÊôÇÈñì
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {generateCompleteWageLedgerData().map((data, index) => (
                <tr key={index} className={data.hasData ? "hover:bg-gray-50" : "hover:bg-gray-50 bg-gray-25"}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {data.displayText}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                    {data.hasData ? `¬•${formatCurrency(data.basicWage)}` : '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                    {data.hasData ? `¬•${formatCurrency(data.overtime)}` : '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                    {data.hasData ? `¬•${formatCurrency(data.allowances)}` : '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 font-medium">
                    {data.hasData ? `¬•${formatCurrency(data.totalGross)}` : '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-red-600">
                    {data.hasData ? `¬•${formatCurrency(data.totalDeductions)}` : '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-blue-600 font-medium">
                    {data.hasData ? `¬•${formatCurrency(data.netPay)}` : '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                    {data.hasData && data.workingDays > 0 ? `${data.workingDays}Êó•` : '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                    {data.hasData && data.workingHours > 0 ? `${data.workingHours}h` : '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                    {data.hasData && data.overtimeHours > 0 ? `${data.overtimeHours}h` : '-'}
                  </td>
                </tr>
              ))}
              {/* ÂêàË®àË°å */}
              <tr className="bg-gray-100 font-medium">
                <td className="px-6 py-4 whitespace-nowrap text-sm font-bold text-gray-900">
                  ÂêàË®à
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 font-bold">
                  ¬•{formatCurrency(totals.basicWage)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 font-bold">
                  ¬•{formatCurrency(totals.overtime)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 font-bold">
                  ¬•{formatCurrency(totals.allowances)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 font-bold">
                  ¬•{formatCurrency(totals.totalGross)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-red-600 font-bold">
                  ¬•{formatCurrency(totals.totalDeductions)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-blue-600 font-bold">
                  ¬•{formatCurrency(totals.netPay)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 font-bold">
                  {totals.workingDays > 0 ? `${totals.workingDays}Êó•` : '-'}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 font-bold">
                  {totals.workingHours > 0 ? `${totals.workingHours}h` : '-'}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 font-bold">
                  {totals.overtimeHours > 0 ? `${totals.overtimeHours}h` : '-'}
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
      <div className="mt-6 flex justify-between">
        <button
          onClick={() => navigate(`/admin/wage-ledger/employees?${searchParams.toString()}`)}
          className="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300"
        >
          ÂæìÊ•≠Âì°ÈÅ∏Êäû„Å´Êàª„Çã
        </button>
        <div className="space-x-4">
          <button
            onClick={() => alert('PDFÂá∫ÂäõÊ©üËÉΩ„ÅØ‰ªäÂæåÂÆüË£Ö‰∫àÂÆö„Åß„Åô')}
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            PDFÂá∫Âäõ
          </button>
          <button
            onClick={() => alert('ExcelÂá∫ÂäõÊ©üËÉΩ„ÅØ‰ªäÂæåÂÆüË£Ö‰∫àÂÆö„Åß„Åô')}
            className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
          >
            ExcelÂá∫Âäõ
          </button>
        </div>
      </div>
    </div>
  );
}

export default WageLedgerView;